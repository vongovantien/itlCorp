<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eFMS.API.Operation</name>
    </assembly>
    <members>
        <member name="T:eFMS.API.Operation.Controllers.CustomsDeclarationController">
            <summary>
            A base class for an MVC controller without view support.
            </summary>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{eFMS.API.Common.Globals.LanguageSub},eFMS.API.Operation.DL.IService.ICustomsDeclarationService,Microsoft.AspNetCore.Hosting.IHostingEnvironment,eFMS.IdentityServer.DL.UserManager.ICurrentUser)">
            <summary>
            constructor
            </summary>
            <param name="localizer">inject interface IStringLocalizer</param>
            <param name="service">inject interface ICustomsDeclarationService</param>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.Get">
            <summary>
            get the list of custom declarations
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.GetBy(System.String)">
            <summary>
            get the list of custom declarations by job no
            </summary>
            <param name="jobNo">jobNo that want to retrieve custom declarations</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.Query(eFMS.API.Operation.DL.Models.Criteria.CustomsDeclarationCriteria)">
            <summary>
            get the list of custom declarations by conditions
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.GetCustomDeclaration(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="keySearch"></param>
            <param name="customerNo"></param>
            <param name="imporTed"></param>
            <param name="page"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.Paging(eFMS.API.Operation.DL.Models.Criteria.CustomsDeclarationCriteria,System.Int32,System.Int32)">
            <summary>
            get and paging the list of custom declarations by conditions
            </summary>
            <param name="criteria">search conditions</param>
            <param name="pageNumber">page to retrieve data</param>
            <param name="pageSize">number items per page</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.AddNew(eFMS.API.Operation.DL.Models.CustomsDeclarationModel)">
            <summary>
            add new custom clearance
            </summary>
            <param name="model">object to add</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.Update(eFMS.API.Operation.DL.Models.CustomsDeclarationModel)">
            <summary>
            update an existed item
            </summary>
            <param name="model">object to update</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.Delete(System.Int32)">
            <summary>
            delete an existed item
            </summary>
            <param name="id">id of existed item that want to delete</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.ImportClearancesFromEcus">
            <summary>
            import custom declaration from ecus system
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.GetClearanceTypes">
            <summary>
            get clearance types(types, cargoTypes, routes, serviceTypes)
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.UpdateJobToClearances(System.Collections.Generic.List{eFMS.API.Operation.DL.Models.CustomsDeclarationModel})">
            <summary>
            add( update) job to clearances
            </summary>
            <param name="clearances">list of clearances</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.GetById(System.Int32)">
            <summary>
            get custom declarations by id
            </summary>
            <param name="id">id that want to retrieve custom declarations</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.CheckPermission(System.Int32)">
            <summary>
            get custom declarations by id
            </summary>
            <param name="id">id that want to retrieve custom declarations</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.CheckDeletePermission(System.Collections.Generic.List{eFMS.API.Operation.DL.Models.CustomsDeclarationModel})">
            
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.DeleteMultiple(System.Collections.Generic.List{eFMS.API.Operation.DL.Models.CustomsDeclarationModel})">
            <summary>
            delete multiple custom clearance
            </summary>
            <param name="listCustom"></param>
            <param name="customs">list of clearances selected</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.DownloadExcel">
            <summary>
            download file excel from server
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.UploadFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            read data from file excel
            </summary>
            <param name="uploadedFile"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.Import(System.Collections.Generic.List{eFMS.API.Operation.DL.Models.CustomsDeclarationModel})">
            <summary>
            import list custom clearance
            </summary>
            <param name="data">list custom clearance</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.CustomsDeclarationController.GetCustomsShipmentNotLocked">
            <summary>
            Get list custom of shipment operation (not locked)
            </summary>
            <returns></returns>
        </member>
        <member name="T:eFMS.API.Operation.Controllers.EcusConnectionController">
            <summary>
            A base class for an MVC controller without view support.
            </summary>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.EcusConnectionController.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{eFMS.API.Common.Globals.LanguageSub},eFMS.API.Operation.DL.IService.IEcusConnectionService,eFMS.IdentityServer.DL.UserManager.ICurrentUser)">
            <summary>
            constructor
            </summary>
            <param name="localizer">inject interface IStringLocalizer</param>
            <param name="service">inject interface IEcusConnectionService</param>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.EcusConnectionController.AddNew(eFMS.API.Operation.DL.Models.SetEcusConnectionModel)">
            <summary>
            add new ecus connection
            </summary>
            <param name="model">model to add</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.EcusConnectionController.Update(eFMS.API.Operation.DL.Models.SetEcusConnectionModel)">
            <summary>
            update an existed item
            </summary>
            <param name="model">object to update</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.EcusConnectionController.Delete(System.Int32)">
            <summary>
            delete an existed item
            </summary>
            <param name="id">id of item want to delete</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.EcusConnectionController.CheckAllowDelete(System.Int32)">
            <summary>
            Check permission delete ecus
            </summary>
            <param name="id">id of item want to delete</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.EcusConnectionController.CheckAllowDetail(System.Int32)">
            <summary>
            Check permission view detail ecus
            </summary>
            <param name="id">id of item want to delete</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.EcusConnectionController.Paging(eFMS.API.Operation.DL.Models.Criteria.SetEcusConnectionCriteria,System.Int32,System.Int32)">
            <summary>
            get and paging the list of custom declarations by conditions
            </summary>
            <param name="criteria">search conditions</param>
            <param name="pageNumber">page to retrieve data</param>
            <param name="pageSize">number items per page</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.EcusConnectionController.GetAll">
            <summary>
            get all ecus connections
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.EcusConnectionController.GetDetails(System.Int32)">
            <summary>
            get detail of ecus connection by id
            </summary>
            <param name="id">id of data that want to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.EcusConnectionController.GetDataEcusByUser(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            get data from ecus system by user id
            </summary>
            <param name="userId">user id</param>
            <param name="serverName">server name</param>
            <param name="dbusername">user name sql</param>
            <param name="dbpassword">password sql</param>
            <param name="database">database name</param>
            <returns></returns>
        </member>
        <member name="T:eFMS.API.Operation.Controllers.OpsStageAssignedController">
            <summary>
            A base class for an MVC controller without view support.
            </summary>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.OpsStageAssignedController.#ctor(Microsoft.Extensions.Localization.IStringLocalizer{eFMS.API.Common.Globals.LanguageSub},eFMS.API.Operation.DL.IService.IOpsStageAssignedService,AutoMapper.IMapper,eFMS.IdentityServer.DL.UserManager.ICurrentUser)">
            <summary>
            constructor
            </summary>
            <param name="localizer"></param>
            <param name="service"></param>
            <param name="iMapper"></param>
            <param name="user"></param>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.OpsStageAssignedController.Get(System.Guid)">
            <summary>
            get list of stages that assigned to a job
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.OpsStageAssignedController.GetById(System.Guid)">
            <summary>
            get stage assigned
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.OpsStageAssignedController.GetNotAssigned(System.Guid,System.Nullable{System.Int32})">
            <summary>
            get list of stages that not assigned to a job
            </summary>
            <param name="jobId"></param>
            <param name="departmentStage"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.OpsStageAssignedController.Add(eFMS.API.Operation.DL.Models.OpsStageAssignedEditModel)">
            <summary>
            add new stage to shipment
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.OpsStageAssignedController.DeleteStageAssigned(System.Guid)">
            <summary>
            delete an existed charge
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.OpsStageAssignedController.AddMultipleStage(System.Collections.Generic.List{eFMS.API.Operation.DL.Models.OpsStageAssignedEditModel},System.Guid)">
            <summary>
            add list of stages to a job
            </summary>
            <param name="models">list of stages</param>
            <param name="jobId">id of job want to add list stages</param>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.OpsStageAssignedController.OperatiosStageStatus">
            <summary>
            get status of stage
            </summary>
            <returns></returns>
        </member>
        <member name="M:eFMS.API.Operation.Controllers.OpsStageAssignedController.Update(eFMS.API.Operation.DL.Models.OpsStageAssignedEditModel)">
            <summary>
            update an existed item
            </summary>
            <param name="model">model to update</param>
            <returns></returns>
        </member>
    </members>
</doc>
